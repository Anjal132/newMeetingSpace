"""
Django settings for meetingSpace project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ltd)xdb6h0v@-813uj92^3g$i8ax8=3bc3wn88sq68mk99+hyj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

RUNSERVERPLUS_SERVER_ADDRESS_PORT = '0.0.0.0:8070'  # New

# Application definition

INSTALLED_APPS = [
    'tenant_schemas',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    # Third Party apps
    'django_extensions',
    'rest_framework',
    'djcelery_email',
    'corsheaders',
    'multiselectfield',
    'drf_yasg',

    # Custom apps
    'users',
    'api',
    'organization',
    'staffProfile',
    'userProfile',
    'property',
    'meeting',
    'utils',
    'permission',
    'ccalendar',
    'notifications',
    'groups',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'meetingSpace.middleware.CustomHeaderMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meetingSpace.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# TEMPLATE_DIRS = (
#     os.path.join(SETTINGS_PATH, 'templates'),
# )

WSGI_APPLICATION = 'meetingSpace.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {                # New
        'ENGINE': 'tenant_schemas.postgresql_backend',
        'NAME': 'meeting',
        'USER': 'meeting',
        'PASSWORD': 'meeting@t4tech',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kathmandu'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'


# New #

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

DATABASE_ROUTERS = (
    'tenant_schemas.routers.TenantSyncRouter',
)

TENANT_APPS = (
    'django.contrib.contenttypes',

    # Custom apps
    'userProfile',
    'property',
    'meeting',
    'ccalendar',
    'notifications',
    'groups',
)

SHARED_APPS = (
    'tenant_schemas',
    'organization',

    'django.contrib.contenttypes',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'users',
    'staffProfile',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.request',
    # ...
)

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'meetingSpace.backend.JWTAuthentication',
    ),

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),

    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),

    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'PAGE_SIZE': 1,

    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

TENANT_MODEL = 'organization.Organization'

SITE_ID = 1

ACCESS_TOKEN_EXPIRY_TIME = 1500      # Minutes

REFRESH_TOKEN_EXPIRY_TIME = 15       # Days

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'

FRONTEND_URL = 'https://192.168.0.108:3000'

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = "Asia/Kathmandu"

AUTH_USER_MODEL = 'users.User'

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'ojha.anjal@gmail.com'
EMAIL_HOST_PASSWORD = 'ocpjkxfadecjpmyo'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

CORS_ORIGIN_WHITELIST = [
    "https://192.168.5.16:3000",
    "https://localhost:3000",
    "https://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

SESSION_COOKIE_HTTPONLY = True

# SESSION_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = True

INTERNAL_IPS = [
    '192.168.5.78',
    '127.0.0.1',
]

#Change the check company subscription to run every midnight
CELERY_BEAT_SCHEDULE = {
    'refresh_token_google': {
        'task': 'meeting.tasks.refresh_token_google',
        'schedule': crontab(minute="*/20"),
    },
    'check_company_subscription': {
        'task': 'meeting.tasks.check_company_subscription',
        'schedule': crontab(minute=0, hour=0),
    },
    'check_meeting_status': {
        'task': 'meeting.tasks.check_meeting_status',
        'schedule': crontab(minute="*/1"),
    },
    'reminders_of_meeting': {
        'task': 'meeting.tasks.reminders_of_meeting',
        'schedule': crontab(minute="*/1"),
    },
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
